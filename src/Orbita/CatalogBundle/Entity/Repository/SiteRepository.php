<?php

namespace Orbita\CatalogBundle\Entity\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * SiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SiteRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSites($limit = null)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->addOrderBy('b.title', 'ASC');

        if (is_null($limit) === false)
            $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }

    public function getSitesByCategory($catId, $limit = null)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.cat_id = :cat_id')
            ->addOrderBy('c.id')
            ->setParameter('cat_id', $catId);

        return $qb->getQuery()->getResult();
    }

    public function getVipSites($limit)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.vip = 1')
            ->addOrderBy('c.id');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function getLatestSites($limit)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->addOrderBy('c.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function getHPSites()
    {
        $vip = $this->getVipSites(3);
        $last = $this->getLatestSites(3);
        $merged = array_merge((array) $vip, (array) $last);
        $sites = array_unique($merged, SORT_REGULAR);

        return $sites;
    }
}
